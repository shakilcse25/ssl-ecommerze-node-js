"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const request_1 = require("./utils/request");
const diffSeconds_1 = require("./utils/diffSeconds");
const bkashException_1 = require("./exceptions/bkashException");
/**
 * Bkash Payment Gateway Main Entrypoint
 * @example
 * ```javascript
 * const BkashGateway = require('bkash-payment-gateway');
 * const bkash = new BkashGateway({
 *		baseURL: process.env.BKASH_BASEURL,
 *		key: process.env.BKASH_API_KEY,
 *		secret: process.env.BKASH_API_SECRET,
 *		username: process.env.BKASH_USERNAME,
 *		password: process.env.BKASH_PASSWORD,
 * });
 * ```
 */
class BkashGateway {
    /**
     *
     * @param config config object required by the `bkash-payment-gateway` package
     * @example
     * ```
     * const bkashConfig = {
     *   baseURL: 'https://checkout.sandbox.bka.sh/v1.2.0-beta/',
     *   key: 'abcdxx2369',
     *   username: 'bkashTest',
     *   password: 'bkashPassword1',
     *   secret: 'bkashSup3rS3cRet',
     * }
     * const bkash = new BkashGateway(config)
     * ```
     *
     */
    constructor(config) {
        /**
         * Start the initial payment request
         *
         * @param paymentDetails Information required to start a payment flow
         *
         * @returns Promise of Bkash Create payment Response
         * @example
         * ```
         * const result = await bkash.createPayment({
         *   amount: 1000,
         *   orderID: 'ORD1020069',
         *   intent: 'sale',
         * });
         * ```
         */
        this.createPayment = (paymentDetails) => __awaiter(this, void 0, void 0, function* () {
            const { amount, intent, orderID, merchantAssociationInfo } = paymentDetails;
            const payload = {
                amount,
                intent,
                currency: 'BDT',
                merchantInvoiceNumber: orderID,
                merchantAssociationInfo: merchantAssociationInfo !== null && merchantAssociationInfo !== void 0 ? merchantAssociationInfo : '',
            };
            const headers = yield this.createTokenHeader();
            return yield request_1.post(`${this.baseURL}/checkout/payment/create`, payload, headers);
        });
        /**
         * Execute a payment after a user has completed bkash auth flow
         * @param paymentID - Payment ID to Execute
         * @example
         * ```
         * const result = await bkash.executePayment(paymentID);
         * ```
         */
        this.executePayment = (paymentID) => __awaiter(this, void 0, void 0, function* () {
            try {
                const headers = yield this.createTokenHeader();
                return yield request_1.post(`${this.baseURL}/checkout/payment/execute/${paymentID}`, null, headers);
            }
            catch (error) {
                throw new bkashException_1.BkashException('Timeout of 30 Seconds Exceeded While Executing Payment, Please Query the Payment');
            }
        });
        /**
         * Query Payment From Bkash
         * @param paymentID - Payment ID to Query
         *
         * @example
         * ```
         * const result = await bkash.queryPayment(paymentID);
         * ```
         */
        this.queryPayment = (paymentID) => __awaiter(this, void 0, void 0, function* () {
            const headers = yield this.createTokenHeader();
            return yield request_1.get(`${this.baseURL}/checkout/payment/query/${paymentID}`, headers);
        });
        /**
         * Search with a transaction ID
         * @param trxID - Transaction ID to Search
         *
         * @example
         * ```
         * const result = await bkash.searchTransaction('TRX22347463XX');
         * ```
         */
        this.searchTransaction = (trxID) => __awaiter(this, void 0, void 0, function* () {
            return yield request_1.get(`${this.baseURL}/checkout/payment/query/${trxID}`, yield this.createTokenHeader());
        });
        /**
         * Refund a transaction
         * @param trxID - Transaction ID to Search
         *
         * @example
         * ```
         * const refunTransactionData = {
         *  paymentID: '22423169',
         *  amount: '25.69', //do not add more than two decimal points
         *  trxID: 'TRX22347463XX',
         *  sku: 'SK256519',
         * };
         *
         * const result = await bkash.refundTransaction(refunTransactionData);
         * ```
         */
        this.refundTransaction = (refundInfo) => __awaiter(this, void 0, void 0, function* () {
            return request_1.post(`${this.baseURL}/checkout/payment/refund`, refundInfo, yield this.createTokenHeader());
        });
        /**
         * Check Refund Status for a given paymentID and transaction ID
         * @param trxID transaction ID
         * @param paymentID payment ID
         * @example
         * ```
         * const result = await bkash.refundStatus('TRX22347463XX', '12437969');
         * ```
         */
        this.refundStatus = (trxID, paymentID) => __awaiter(this, void 0, void 0, function* () {
            return yield request_1.post(`${this.baseURL}/checkout/payment/refund`, { trxID, paymentID }, yield this.createTokenHeader());
        });
        this.createTokenHeader = () => __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getToken();
            return {
                authorization: token,
                'x-app-key': this.key,
            };
        });
        this.getToken = () => __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const diff = diffSeconds_1.diffSeconds(this.tokenIssueTime);
                if (diff > 3500) {
                    //request a new token if expired
                    const { id_token, refresh_token, msg, status } = yield this.newToken(this.refreshToken);
                    //throw error if bkash sends status [only happens when request fails]
                    if (status)
                        throw new bkashException_1.BkashException(msg);
                    this.token = id_token;
                    this.refreshToken = refresh_token;
                    this.tokenIssueTime = Date.now();
                }
                return this.token;
            }
            else {
                //first time?
                const { id_token, refresh_token, msg, status } = yield this.getInitialToken();
                //throw error if bkash sends status [only happens when request fails]
                if (status)
                    throw new bkashException_1.BkashException(msg);
                this.token = id_token;
                this.refreshToken = refresh_token;
                this.tokenIssueTime = Date.now();
                return this.token;
            }
        });
        this.getInitialToken = () => __awaiter(this, void 0, void 0, function* () {
            const response = yield request_1.post(`${this.baseURL}/checkout/token/grant`, {
                app_key: this.key,
                app_secret: this.secret,
            }, this.headers);
            if (response.status === 'fail')
                throw new bkashException_1.BkashException('Invalid API Credentials Provided');
            return response;
        });
        this.newToken = (refresh) => {
            return request_1.post(`${this.baseURL}/checkout/token/refresh`, {
                app_key: this.key,
                app_secret: this.secret,
                refresh_token: refresh,
            }, this.headers);
        };
        this.validateConfig = (config) => {
            const { baseURL, key, password, secret, username } = config;
            if (!baseURL || baseURL === '')
                throw new bkashException_1.BkashException('Invalid BaseURL provided');
            if (!key || key === '')
                throw new bkashException_1.BkashException('Invalid API Key provided');
            if (!secret || secret === '')
                throw new bkashException_1.BkashException('Invalid API secret provided');
            if (!username || username === '')
                throw new bkashException_1.BkashException('Invalid API username provided');
            if (!password || password === '')
                throw new bkashException_1.BkashException('Invalid API password provided');
        };
        // validations
        if (Object.keys(config).length !== 5)
            throw new bkashException_1.BkashException('Invalid Configuration provided');
        this.validateConfig(config);
        //main task
        const { baseURL, key, password, secret, username } = config;
        this.baseURL = baseURL;
        this.key = key;
        this.secret = secret;
        this.headers = {
            username,
            password,
        };
    }
}
module.exports = BkashGateway;
