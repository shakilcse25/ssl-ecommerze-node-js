"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.post = exports.get = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const abort_controller_1 = __importDefault(require("abort-controller"));
const bkashException_1 = require("../exceptions/bkashException");
function get(url, additionalHeaders) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield node_fetch_1.default(url, {
            method: 'GET',
            headers: Object.assign({ 'content-type': 'application/json', Accept: 'application/json' }, additionalHeaders),
        });
        const parsed = yield response.json();
        if (parsed.errorMessage)
            throw new bkashException_1.BkashException(parsed.errorMessage);
        return parsed;
    });
}
exports.get = get;
function post(url, payload = {}, additionalHeaders) {
    return __awaiter(this, void 0, void 0, function* () {
        const controller = new abort_controller_1.default();
        const timeout = setTimeout(() => {
            controller.abort();
        }, 30 * 1000);
        const response = yield node_fetch_1.default(url, {
            headers: Object.assign({ 'content-type': 'application/json', Accept: 'application/json' }, additionalHeaders),
            body: JSON.stringify(payload),
            method: 'POST',
            signal: controller.signal,
        });
        clearTimeout(timeout);
        const parsed = yield response.json();
        if (parsed.errorMessage)
            throw new bkashException_1.BkashException(parsed.errorMessage);
        return parsed;
    });
}
exports.post = post;
